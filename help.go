package starter

import (
	"fmt"
	"os"
)

func showHelp() {
	fmt.Fprintln(
		os.Stderr,
		"start_server is a superdaemon for hot-deploying server programs.\n",
		"\n",
		"Usage:\n",
		"    start_server [options] -- server-prog server-arg1 server-arg2 ...\n",
		"    # start Plack using Starlet listening at TCP port 8000\n",
		"    start_server --port=8000 -- plackup -s Starlet --max-workers=100 index.psgi\n",
		"Options:\n",
		"  --port=(port|host:port):\n",
		"    TCP port to listen to (if omitted, will not bind to any ports)\n",
		"    If host is not specified, then the program will bind to the default address of IPv4 (\"0.0.0.0\").\n",
		"    Square brackets should be used to specify an IPv6 address (e.g. --port=[::1]:8080)\n",
		"    The command binds to UDP ports if the port numbers are prefixed by \"u\" (e.g., --port=u443).",
		"\n",
		"  --path=path:\n",
		"    path at where to listen using unix socket (optional)\n",
		"\n",
		"  --dir=path\n",
		"    working directory, start_server do chdir to before exec (optional)\n",
		"\n",
		"  --interval=(seconds|Go's duration format):\n",
		"    minimum interval to respawn the server program (default: 1)\n",
		"    Go's duration format is available, such as such as \"300ms\", \"1.5h\" or \"2h45m\".\n",
		"    Valid time units are \"ns\", \"us\" (or \"Âµs\"), \"ms\", \"s\", \"m\", \"h\".\n",
		"    See also https://golang.org/pkg/time/#Duration\n",
		"\n",
		"  --signal-on-hup=SIGNAL\n",
		"    name of the signal to be sent to the server process when start_server receives a SIGHUP (default: SIGTERM).\n",
		"    If you use this option, be sure to also use --signal-on-term below.\n",
		"\n",
		"  --signal-on-term=SIGNAL\n",
		"    name of the signal to be sent to the server process when start_server receives a SIGTERM (default: SIGTERM).\n",
		"\n",
		"  --pid-file=filename\n",
		"    if set, writes the process id of the start_server process to the file.\n",
		"\n",
		"  --status-file=filename\n",
		"    if set, writes the status of the server process(es) to the file.\n",
		"\n",
		"  --envdir=ENVDIR:\n",
		"    directory that contains environment variables to the server processes.\n",
		"    This can be overwritten by environment variable ENVDIR.\n",
		"\n",
		"  --log-file=file:\n",
		"  --log-file=\"| cmd args...\":\n",
		"    if set, redirects STDOUT and STDERR to given file or command\n",
		"\n",
		"  --daemonize: (UNIMPLEMENTED)\n",
		"    daemonizes the server.\n",
		"\n",
		"  --enable-auto-restart:\n",
		"    enables automatic restart by time.\n",
		"    This can be overwritten by environment variable ENABLE_AUTO_RESTART.\n",
		"\n",
		"  --auto-restart-interval=(seconds|Go's duration format):\n",
		"    automatic restart interval (default 360). It is used with --enable-auto-restart option.\n",
		"    This can be overwritten by environment variable AUTO_RESTART_INTERVAL.\n",
		"\n",
		"  --kill-old-delay=(seconds|Go's duration format):\n",
		"    time to suspend to send a signal to the old worker.\n",
		"    The default value is 5 when --enable-auto-restart is set, 0 otherwise.\n",
		"    This can be overwritten by environment variable KILL_OLD_DELAY.\n",
		"\n",
		"  --backlog=size: (UNIMPLEMENTED)\n",
		"    specifies a listen backlog parameter, whose default is SOMAXCONN (usually 128 on Linux).\n",
		"\n",
		"  --restart\n",
		"    this is a wrapper command that reads the pid of the start_server process from --pid-file,\n",
		"    sends SIGHUP to the process and waits until the server(s) of the older generation(s) die by monitoring the contents of the --status-file\n",
		"\n",
		"  --stop\n",
		"    this is a wrapper command that reads the pid of the start_server process from --pid-file, sends SIGTERM to the process.\n",
		"\n",
		"  --help\n",
		"    prints this help.\n",
		"\n",
		"  --version\n",
		"    prints the version number.\n",
		"\n",
		"It is Yet Another Go port of start_server utility (a.k.a. Server::Starter),\n",
		"    based on lestrrat-go/server-starter.\n",
		"    https://github.com/shogo82148/server-starter",
	)
}
